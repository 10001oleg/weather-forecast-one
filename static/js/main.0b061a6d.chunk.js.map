{"version":3,"sources":["actions/index.js","actions/actionTypes.js","components/currentWeather/index.js","helpers/capitalize.js","containers/weather/index.js","components/app/index.js","reducers/weatherReducer.js","reducers/index.js","index.js"],"names":["requestWeather","type","receiveWeather","payload","CurrentWeather","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","weather","data","string","temperature","Math","round","main","temp","_weather$weather$","description","icon","humidity","speed","wind","react_default","a","createElement","className","charAt","toUpperCase","slice","src","concat","alt","Component","Weather","renderLoading","renderWeather","_this$props","city","components_currentWeather","shouldRenderWeather","isFetching","fetchWeather","connect","dispatch","cacheTime","source","localStorage","getItem","_JSON$parse","JSON","parse","timestamp","Date","now","sholdFetchData","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","URL","config","key","axios","get","then","res","setItem","stringify","catch","error","console","alert","App","containers_weather","initialState","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","name","createStoreWithMiddleWare","applyMiddleware","ReduxThunk","logger","createStore","ReactDOM","render","react_redux_es","store","reducers","app","document","getElementById"],"mappings":"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","file":"static/js/main.0b061a6d.chunk.js","sourcesContent":["import * as types from \"./actionTypes\";\nimport axios from \"axios\";\nimport config from \"../helpers/config.json\";\n\nconst sholdFetchData = cacheTime => {\n  const source = localStorage.getItem(\"weather\");\n\n  if (!source) {\n    return null;\n  }\n\n  const { timestamp, data } = JSON.parse(source);\n  const checkTimestamp = Date.now() - timestamp > cacheTime * 60000;\n\n  if (checkTimestamp) {\n    return null;\n  }\n  return data;\n};\n\nexport const fetchWeather = () => dispatch => {\n  dispatch(requestWeather());\n  const data = sholdFetchData(60);\n\n  if (data) {\n    return dispatch(receiveWeather(data));\n  }\n\n  navigator.geolocation.getCurrentPosition(position => {\n    let lat = position.coords.latitude;\n    let lon = position.coords.longitude;\n    const URL = `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${\n      config.key\n    }&units=imperial`;\n\n    axios\n      .get(URL)\n      .then(res => {\n        dispatch(receiveWeather(res.data));\n        localStorage.setItem(\n          \"weather\",\n          JSON.stringify({ timestamp: Date.now(), data: res.data })\n        );\n      })\n      .catch(error => {\n        console.error(error);\n        alert(\"Unable to retrieve weather data. Please refresh.\");\n      });\n  });\n};\n\nconst requestWeather = () => {\n  return {\n    type: types.REQUEST_WEATHER\n  };\n};\n\nconst receiveWeather = payload => {\n  return {\n    type: types.RECEIVE_WEATHER,\n    payload\n  };\n};\n","export const FETCH_WEATHER = \"FETCH_WEATHER\";\nexport const RECEIVE_WEATHER = \"RECEIVE_WEATHER\";\nexport const REQUEST_WEATHER = \"REQUEST_WEATHER\";\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { capitalize } from \"../../helpers\";\nimport \"./currentWeather.css\";\n\nclass CurrentWeather extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weather: props.data\n    };\n  }\n\n  render() {\n    const { weather } = this.state;\n    const temperature = Math.round(+weather.main.temp);\n    const { description, icon } = weather.weather[0];\n    const {\n      main: { humidity },\n      wind: { speed }\n    } = weather;\n\n    return (\n      <div className=\"current-weather\">\n        <p>{capitalize(description)}</p>\n        <h1 className=\"large-font\">\n          <span>\n            <img\n              src={`http://openweathermap.org/img/w/${icon}.png`}\n              alt={`icon ${description}`}\n            />\n          </span>\n          {temperature}Â°F\n        </h1>\n        <p>Humidity: {humidity}</p>\n        <p>Wind: {speed}</p>\n      </div>\n    );\n  }\n}\n\nCurrentWeather.propTypes = {\n  data: PropTypes.object.isRequired\n};\n\nexport default CurrentWeather;\n","export const capitalize = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchWeather } from \"../../actions\";\nimport CurrentWeather from \"../../components/currentWeather\";\nimport \"./Weather.css\";\n\nclass Weather extends Component {\n  componentDidMount() {\n    this.props.fetchWeather();\n  }\n\n  renderLoading = () => {\n    return <div className=\"container center\">Loading...</div>;\n  };\n\n  renderWeather = () => {\n    const { city, data } = this.props;\n    return (\n      <div className=\"container center\">\n        <h1>{city}</h1>\n        <CurrentWeather data={data} />\n      </div>\n    );\n  };\n\n  shouldRenderWeather = () => {\n    if (this.props.isFetching || !this.props.data) {\n      return this.renderLoading();\n    } else {\n      return this.renderWeather();\n    }\n  };\n\n  render() {\n    return this.shouldRenderWeather();\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isFetching: state.weather.isFetching,\n    data: state.weather.data,\n    city: state.weather.city\n  };\n};\n\nWeather.propTypes = {\n  isFetching: PropTypes.bool.isRequired,\n  data: PropTypes.object,\n  city: PropTypes.string\n};\n\nexport default connect(\n  mapStateToProps,\n  { fetchWeather }\n)(Weather);\n","import React from \"react\";\nimport Weather from \"../../containers/weather\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"background\">\n      <Weather />\n    </div>\n  );\n};\n\nexport default App;\n","import * as types from \"../actions/actionTypes.js\";\n\nvar initialState = {\n  isFetching: false,\n  data: null,\n  city: null\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case types.REQUEST_WEATHER:\n      return { ...state, isFetching: true };\n    case types.RECEIVE_WEATHER:\n      const newState = {\n        ...state,\n        isFetching: false,\n        data: action.payload,\n        city: action.payload.name\n      };\n      return newState;\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport weatherReducer from './weatherReducer';\n\nconst rootReducer = combineReducers({\n  weather: weatherReducer\n})\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./components/app\";\nimport reducers from \"./reducers\";\n\nconst createStoreWithMiddleWare = applyMiddleware(ReduxThunk, logger)(\n  createStore\n);\n\nReactDOM.render(\n  <Provider store={createStoreWithMiddleWare(reducers)}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}