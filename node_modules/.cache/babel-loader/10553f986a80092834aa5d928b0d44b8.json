{"ast":null,"code":"import * as types from \"./actionTypes\";\nimport axios from \"axios\";\nimport config from \"../helpers/config.json\";\n\nvar sholdFetchData = function sholdFetchData(cacheTime) {\n  var source = localStorage.getItem(\"weather\");\n\n  if (!source) {\n    return null;\n  }\n\n  var _JSON$parse = JSON.parse(source),\n      timestamp = _JSON$parse.timestamp,\n      data = _JSON$parse.data;\n\n  var checkTimestamp = Date.now() - timestamp > cacheTime * 60000;\n\n  if (checkTimestamp) {\n    return null;\n  }\n\n  return data;\n};\n\nexport var fetchWeather = function fetchWeather() {\n  return function (dispatch) {\n    dispatch(requestWeather());\n    var data = sholdFetchData(60);\n\n    if (data) {\n      return dispatch(receiveWeather(data));\n    }\n\n    navigator.geolocation.getCurrentPosition(function (position) {\n      var lat = position.coords.latitude;\n      var lon = position.coords.longitude;\n      var URL = \"http://api.openweathermap.org/data/2.5/weather?lat=\".concat(lat, \"&lon=\").concat(lon, \"&APPID=\").concat(config.key, \"&units=imperial\");\n      axios.get(URL).then(function (res) {\n        dispatch(receiveWeather(res.data));\n        localStorage.setItem(\"weather\", JSON.stringify({\n          timestamp: Date.now(),\n          data: res.data\n        }));\n      }).catch(function (error) {\n        console.error(error);\n        alert(\"Unable to retrieve weather data. Please refresh.\");\n      });\n    });\n  };\n};\n\nvar requestWeather = function requestWeather() {\n  return {\n    type: types.REQUEST_WEATHER\n  };\n};\n\nvar receiveWeather = function receiveWeather(payload) {\n  return {\n    type: types.RECEIVE_WEATHER,\n    payload: payload\n  };\n};","map":{"version":3,"sources":["/Users/10001oleg/1proj/weather-forecast-one/src/actions/index.js"],"names":["types","axios","config","sholdFetchData","cacheTime","source","localStorage","getItem","JSON","parse","timestamp","data","checkTimestamp","Date","now","fetchWeather","dispatch","requestWeather","receiveWeather","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","URL","key","get","then","res","setItem","stringify","catch","error","console","alert","type","REQUEST_WEATHER","payload","RECEIVE_WEATHER"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,eAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,SAAS,EAAI;AAClC,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAf;;AAEA,MAAI,CAACF,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AALiC,oBAMNG,IAAI,CAACC,KAAL,CAAWJ,MAAX,CANM;AAAA,MAM1BK,SAN0B,eAM1BA,SAN0B;AAAA,MAMfC,IANe,eAMfA,IANe;;AAOlC,MAAMC,cAAc,GAAGC,IAAI,CAACC,GAAL,KAAaJ,SAAb,GAAyBN,SAAS,GAAG,KAA5D;;AAEA,MAAIQ,cAAJ,EAAoB;AAClB,WAAO,IAAP;AACD;;AACD,SAAOD,IAAP;AACD,CAbD;;AAeA,OAAO,IAAMI,YAAY,GAAG,SAAfA,YAAe;AAAA,SAAM,UAAAC,QAAQ,EAAI;AAC5CA,IAAAA,QAAQ,CAACC,cAAc,EAAf,CAAR;AACA,QAAMN,IAAI,GAAGR,cAAc,CAAC,EAAD,CAA3B;;AAEA,QAAIQ,IAAJ,EAAU;AACR,aAAOK,QAAQ,CAACE,cAAc,CAACP,IAAD,CAAf,CAAf;AACD;;AAEDQ,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAAAC,QAAQ,EAAI;AACnD,UAAIC,GAAG,GAAGD,QAAQ,CAACE,MAAT,CAAgBC,QAA1B;AACA,UAAIC,GAAG,GAAGJ,QAAQ,CAACE,MAAT,CAAgBG,SAA1B;AACA,UAAMC,GAAG,gEAAyDL,GAAzD,kBAAoEG,GAApE,oBACPxB,MAAM,CAAC2B,GADA,oBAAT;AAIA5B,MAAAA,KAAK,CACF6B,GADH,CACOF,GADP,EAEGG,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACXhB,QAAAA,QAAQ,CAACE,cAAc,CAACc,GAAG,CAACrB,IAAL,CAAf,CAAR;AACAL,QAAAA,YAAY,CAAC2B,OAAb,CACE,SADF,EAEEzB,IAAI,CAAC0B,SAAL,CAAe;AAAExB,UAAAA,SAAS,EAAEG,IAAI,CAACC,GAAL,EAAb;AAAyBH,UAAAA,IAAI,EAAEqB,GAAG,CAACrB;AAAnC,SAAf,CAFF;AAID,OARH,EASGwB,KATH,CASS,UAAAC,KAAK,EAAI;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAE,QAAAA,KAAK,CAAC,kDAAD,CAAL;AACD,OAZH;AAaD,KApBD;AAqBD,GA7B2B;AAAA,CAArB;;AA+BP,IAAMrB,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,SAAO;AACLsB,IAAAA,IAAI,EAAEvC,KAAK,CAACwC;AADP,GAAP;AAGD,CAJD;;AAMA,IAAMtB,cAAc,GAAG,SAAjBA,cAAiB,CAAAuB,OAAO,EAAI;AAChC,SAAO;AACLF,IAAAA,IAAI,EAAEvC,KAAK,CAAC0C,eADP;AAELD,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID,CALD","sourcesContent":["import * as types from \"./actionTypes\";\nimport axios from \"axios\";\nimport config from \"../helpers/config.json\";\n\nconst sholdFetchData = cacheTime => {\n  const source = localStorage.getItem(\"weather\");\n\n  if (!source) {\n    return null;\n  }\n  const { timestamp, data } = JSON.parse(source);\n  const checkTimestamp = Date.now() - timestamp > cacheTime * 60000;\n\n  if (checkTimestamp) {\n    return null;\n  }\n  return data;\n};\n\nexport const fetchWeather = () => dispatch => {\n  dispatch(requestWeather());\n  const data = sholdFetchData(60);\n\n  if (data) {\n    return dispatch(receiveWeather(data));\n  }\n\n  navigator.geolocation.getCurrentPosition(position => {\n    let lat = position.coords.latitude;\n    let lon = position.coords.longitude;\n    const URL = `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${\n      config.key\n    }&units=imperial`;\n\n    axios\n      .get(URL)\n      .then(res => {\n        dispatch(receiveWeather(res.data));\n        localStorage.setItem(\n          \"weather\",\n          JSON.stringify({ timestamp: Date.now(), data: res.data })\n        );\n      })\n      .catch(error => {\n        console.error(error);\n        alert(\"Unable to retrieve weather data. Please refresh.\");\n      });\n  });\n};\n\nconst requestWeather = () => {\n  return {\n    type: types.REQUEST_WEATHER\n  };\n};\n\nconst receiveWeather = payload => {\n  return {\n    type: types.RECEIVE_WEATHER,\n    payload\n  };\n};\n"]},"metadata":{},"sourceType":"module"}